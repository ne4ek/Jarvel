from infrastructure.providers_impl.repositories_provider_async_impl import *
from infrastructure.config.postgres_config_async import connection_pool


users_repository= PostgresUsersRepositoryAsync(connection_pool)
companies_repository= PostgresCompaniesRepositoryAsync(connection_pool)
tasks_repository= PostgresTasksRepositoryAsync(connection_pool, users_repository, companies_repository)
meetings_repository= PostgresMeetingsRepositoryAsync(connection_pool, users_repository, companies_repository)
messages_repository= PostgresMessagesRepositoryAsync(connection_pool, users_repository)
user_chats_repository= PostgresUserChatsRepositoryAsync(connection_pool)
group_chats_repository= PostgresGroupChatsRepositoryAsync(connection_pool)
mailing_repository= PostgresMailingRepositoryAsync(connection_pool)
arbitrary_data_repository= PostgresArbitraryUserDataRepositoryAsync(connection_pool)
ctrls_repository= PostgresCtrlsRepositoryAsync(connection_pool)
up_repository = PostgresUpRepositoryAsync(connection_pool)
transcribed_voice_message_text_repository = PostgresTranscribedVoiceMessageTextAsync(connection_pool)

repositroties_dependency_provider_async = RepositoriesDependencyProviderImplAsync(users_repository=users_repository,
companies_repository=companies_repository,
tasks_repository=tasks_repository,
meetings_repository=meetings_repository,
messages_repository=messages_repository,
user_chats_repository=user_chats_repository,
group_chats_repository=group_chats_repository,
mailing_repository=mailing_repository,
arbitrary_data_repository=arbitrary_data_repository,
ctrls_repository=ctrls_repository,
ups_repository=up_repository,
transcribed_voice_message_text_repository=transcribed_voice_message_text_repository,
)